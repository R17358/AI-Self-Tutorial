Vision model:

from transformers import AutoFeatureExtractor, AutoModelForImageClassification, TrainingArguments, Trainer
from datasets import load_dataset

# Load dataset and model
dataset = load_dataset("beans")
feature_extractor = AutoFeatureExtractor.from_pretrained("google/vit-base-patch16-224")
model = AutoModelForImageClassification.from_pretrained("google/vit-base-patch16-224", num_labels=3)

# Preprocess images
def preprocess_images(examples):
    images = [feature_extractor(image.convert("RGB"), return_tensors="pt")["pixel_values"][0] for image in examples["image"]]
    examples["pixel_values"] = images
    return examples

dataset = dataset.map(preprocess_images, batched=True)

# Training arguments
training_args = TrainingArguments(
    output_dir="./results",
    evaluation_strategy="epoch",
    per_device_train_batch_size=8,
    num_train_epochs=3,
)

# Initialize Trainer
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=dataset["train"],
    eval_dataset=dataset["validation"],
)

# Fine-tune the model
trainer.train()
