# -*- coding: utf-8 -*-
"""sentiment-analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HSaweKN7ufJglnivcSF51a24WK2IOcDd
"""

import pandas as pd

data = pd.read_csv('twitter_training.csv')

data

data.drop(['2401', 'Borderlands'], axis=1, inplace=True)

data.head()

data.columns = ["sentiment","text"]

data.head()

print(data.info())

data.isnull().sum()

data = data.dropna()

data.isnull().sum()

data.head()

x = data['text']
y = data['sentiment']

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.2)

import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from nltk.stem import WordNetLemmatizer
import string

nltk.download('punkt_tab')
nltk.download('stopwords')
nltk.download('wordnet')

lemmatizer = WordNetLemmatizer()
stop_words = set(stopwords.words('english'))

def preprocess_text(text):
    text = text.lower()
    tokens = word_tokenize(text)
    tokens = [lemmatizer.lemmatize(token) for token in tokens if token not in string.punctuation and token not in stop_words]
    return ' '.join(tokens)

x_train = x_train.apply(preprocess_text)
x_test = x_test.apply(preprocess_text)

from sklearn.feature_extraction.text import TfidfVectorizer
vectorizer = TfidfVectorizer(max_features=5000)
x_train_vectorized = vectorizer.fit_transform(x_train)
x_test_vectorized = vectorizer.transform(x_test)

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score,  classification_report

model = LogisticRegression()
model.fit(x_train_vectorized, y_train)
y_pred = model.predict(x_test_vectorized)
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
# Display classification report (precision, recall, f1-score)
print(classification_report(y_test, y_pred))

import joblib

# Save the model
joblib.dump(model, 'sentiment_analysis_model.pkl')

# Save the vectorizer
joblib.dump(vectorizer, 'vectorizer.pkl')

print(vectorizer.idf_)

user_input = input("Enter text: ")
processed_text = preprocess_text(user_input)

# Transform using the pre-fitted vectorizer (no fitting needed)
vectorized_text = vectorizer.transform([processed_text])  # Use transform, not fit_transform

# Predict sentiment
prediction = model.predict(vectorized_text)[0]
probabilities = model.predict_proba(vectorized_text)[0]

print("Predicted Sentiment:", prediction)
print("Sentiment Probabilities:")
for sentiment, probability in zip(model.classes_, probabilities):
    print(f"{sentiment}: {probability * 100:.2f}%")



